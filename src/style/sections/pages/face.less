
// Default style for LayerFace components
.face {
    display: flex;
    justify-content: flex-start;
    align-items: center;
    height: 3rem;
    position: relative;
    outline: @hairline solid @color-clear;
}

.face__separator {
    display: flex;
    justify-content: space-between;
    align-items: center;
    flex-direction: row;
    height: 3rem;
    flex-grow: 10;
    flex-shrink: 100;
    box-sizing: border-box;
    padding-bottom: -1*@hairline;
    border-bottom: @hairline solid @layerDivider;
}

.face__leash {
    height: 100%;
    align-tems: stretch;
    border-left: @hairline solid @groupLeash;
    padding-left:  @properties-width/40;
    padding-right: .2rem;
    flex-shrink: 0;
    flex-grow: 0;

}

.generate-face__leash-colors(9);

.generate-face__leash-colors(@n, @i: 0) when (@i =< @n) {
    .randomColor(); // use @color as variable in declaration

.face__leash.depth-@{i} {
     border-left: @hairline solid @groupLeash;
  }
    .generate-face__leash-colors(@n, (@i + 1));
}

input[type="text"].face__name {
    font-size: 1.25rem;
}

.face__name {
    flex-grow: 1;
    flex-shrink: 100;
    -webkit-user-select: none;
    overflow: hidden;
    white-space: nowrap;
    text-overflow: ellipsis;
}

// lock state
.face__locked {
    background-size: 10px 10px;
    background-image: repeating-linear-gradient(-45deg, @lockedWhite, @lockedWhite 1px, transparent 1px, transparent 3.5px);
}


// invisibility state
.face__invisible {
    
}


// Parity state
.face__parity_odd {
    
}
.face__parity_even {
    
}

// Selection state

.face:hover,
.face__select_immediate:hover,
.face__select_ancestor:hover{
    outline: @hairline solid @highlight;
    z-index: 99;
    
    .face__separator{
        border-bottom: @hairline solid @color-clear;
    }
}


.layer-list li:last-child .face__select_ancestor .face__separator{
    border-bottom: @hairline solid @selectedGroupBackground;
}

.face__select_immediate:hover{
     border-bottom: @hairline solid @selectedLayerBackground;
}


.face__name:focus {
    background-color: @edit_layer_text;
    color: @warm-white;
    -webkit-user-select: text;
}

.face__select_immediate.face__name,
.face__select_ancestor .face__name {
    color: @warm-black;
}

.face__select_immediate {
    background-color: @selectedLayerBackground;
    border-bottom: @hairline solid @warm-black;
}

.face__select_immediate .face__separator {
    border-bottom: @hairline solid @color-clear;
}

.face__select_ancestor {
    background-color: @selectedGroupBackground;
    color: @warm-black;
}

.face__select_immediate.face__locked {
    background-size: 10px 10px;
    background-image: repeating-linear-gradient(-45deg, @lockedBlack, @lockedBlack 1px, transparent 1px, transparent 3.5px);
    background-color: @warm-white;
}

.face__select_ancestor.face__locked {
    background-size: 10px 10px;
    background-image: repeating-linear-gradient(-45deg, @lockedBlack, @lockedBlack 1px, transparent 1px, transparent 3.5px);
    background-color: @selectedGroupBackground;
}

.face__select_immediate .face__name {
    color: @selectedLayerText;
}

.face__select_immediate .face__leash {
    border-left: @hairline solid @selectedGroupLeash;
}

// Hover state
.face__hover {
    background-color: red;
    
}

// Drag state
.face__drag_target {
    background-color: none;
    opacity: 0.5;
}

// Drop state
.face__drop_target_above {
    border-top: .5rem inset @highlight;
}
.face__drop_target_below {
    border-bottom: .5rem inset @highlight;
}

// Group collapsed state
.face__group_collapsed {
    height: 0;
    visibility: hidden;
    border-bottom: none;
}
.face__group_expanded {
    visibility: visible;
}


// Layer name focus/blur state
.face__input_focus {

}
.face__input_none {
    
}

// For unselected layers, whether the previous/next layer in the z-order is selected
.face__transition_to_select {

}
.face__transition_from_select {

}

// Search match state
.face__search_matched {
    
}
.face__search_none {
    
}
